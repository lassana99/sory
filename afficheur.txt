/*
 * TP_I2C_afficherHeure.c
 *
 * Created: 11/11/2022 09:23:48
 * Author : ASUS
 */ 
#include "util/delay.h"

#include <avr/io.h>

#define F_CPU 16000000UL
#include "D:\A_INGC\INGC2_2022-2023\Systeme Ambarqué & IoT/I2C_LCD.h"



#include <stdlib.h>

//définitions pour le DS3231
#define DS3231_write 0xD0
#define DS3231_read 0xD1

#define reg_control 0x0E

#define reg_seconds 0x00
#define reg_minutes 0x01
#define reg_hours 0x02

#define reg_date 0x04
#define reg_months 0x05
#define reg_years 0x06

#define reg_temp_up 0x11
#define reg_temp_low 0x12

unsigned char sec, min, heu, jou, moi, ann;
unsigned char temp_up, temp_low;
float temperature;
char buffer[2];
char buffer_temp[5];


/* fonctions pour le DS3231 */
void DS3231_Init(void)
{
	TWI_Init();
	TWI_Start();
	TWI_Write(DS3231_write);//adresse ds3231 en écriture
	TWI_Write(reg_control);//adresse du registre de controle du ds3231
	TWI_Write(0x00);// initialisation à 0 du contenu de reg_control
	TWI_Stop();
}


void DS3231_reglage_heure(unsigned char secondes, unsigned char minutes, unsigned char heures)
{
	TWI_Init();
	TWI_Start();
	TWI_Write(DS3231_write);
	TWI_Write(reg_seconds);
	TWI_Write(secondes);//initialisation valeur des secondes
	TWI_Write(minutes);//incrémentation auto de l'adresse passée (0x00> 0x01 = registre des minutes) donc initialisation valeur des minutes
	TWI_Write(heures);//incrémentation auto de l'adresse passée (0x01> 0x02 = registre des heures) donc initialisation valeur des heures
	TWI_Stop();
}
unsigned int *Heure, *Minute, *Seconde;

void reglage_heure_user()
{
	
}
void DS3231_reglage_date(unsigned char jour, unsigned char mois, unsigned char annee)
{
	TWI_Start();
	TWI_Write(DS3231_write);
	TWI_Write(reg_date);
	TWI_Write(jour);//initialisation valeur des jours
	TWI_Write(mois);//incrémentation auto de l'adresse passée (0x04> 0x05 = registre des mois) donc initialisation valeur des mois
	TWI_Write(annee);//incrémentation auto de l'adresse passée (0x05> 0x06 = registre des annees) donc initialisation valeur des annees
	TWI_Stop();
}

void DS3231_lecture_heure(unsigned char *secondes, unsigned char *minutes, unsigned char *heures)
{
	//définir d'abord l'adresse du registre auquel on veut accéder pour la lecture
	TWI_Start();
	TWI_Write(DS3231_write);
	TWI_Write(reg_seconds);//positionnement registre des secondes
	TWI_Stop();
	//
	TWI_Start();
	TWI_Write(DS3231_read);//accès au DS3231 en lecture
	*secondes = TWI_Read_Ack();//récupération de la valeur des secondes (dans le registre dont la valeur a été definie lors de l'écriture), avec acquittement
	*minutes = TWI_Read_Ack();//incrémentation auto de l'adresse passée (0x00> 0x01 = registre des minutes) donc récupération valeur des minutes, avec acquittement
	*heures = TWI_Read_noAck();//incrémentation auto de l'adresse passée (0x01> 0x02 = registre des heures) donc récupération valeur des heures, sans acquittement car dernière valeur
	TWI_Stop();
}

void DS3231_lecture_date(unsigned char *jour, unsigned char *mois, unsigned char *annee)
{
	//définir d'abord l'adresse du registre auquel on veut accéder pour la lecture
	TWI_Start();
	TWI_Write(DS3231_write);
	TWI_Write(reg_date);//positionnement registre des jours
	TWI_Stop();
	//
	TWI_Start();
	TWI_Write(DS3231_read);//accès au DS3231 en lecture
	*jour = TWI_Read_Ack();//récupération de la valeur des jours (dans le registre dont la valeur a été definie lors de l'écriture), avec acquittement
	*mois = TWI_Read_Ack();//incrémentation auto de l'adresse passée (0x04> 0x05 = registre des mois) donc récupération valeur des mois, avec acquittement
	*annee = TWI_Read_noAck();//incrémentation auto de l'adresse passée (0x05> 0x06 = registre des annees) donc récupération valeur des annees, sans acquittement car dernière valeur
	TWI_Stop();
}

unsigned char BCDToDecimal(unsigned char BCD)  // fonction trouvée sur le net
{
	return (((BCD >> 4) * 10) + (BCD & 0x0F));
}


void DS3231_lecture_temp(unsigned char *poids_fort, unsigned char *poids_faible)
{
	//définir d'abord l'adresse du registre auquel on veut accéder pour la lecture
	TWI_Start();
	TWI_Write(DS3231_write);
	TWI_Write(reg_temp_up);//positionnement registre poids fort température
	TWI_Stop();
	//
	TWI_Start();
	TWI_Write(DS3231_read);//accès au DS3231 en lecture
	*poids_fort = TWI_Read_Ack();//récupération de la valeur de la température octet fort, avec acquittement
	*poids_faible = TWI_Read_noAck();// récupération de la température octet faible, sans acquittement (car dernier octet à lire).
	TWI_Stop();
}






int main(void)
{
	Init_LCD();
	write_LCD("Test LCD par I2C...");
	pos_xy(1,2);
	write_LCD("... avec PCF8574...");
	pos_xy(1,3);
	write_LCD("...sans interruption");
	pos_xy(1,4);
	write_LCD("Syst.Embarques,INGC2");
	_delay_ms(1000);
	DS3231_Init();
	DS3231_reglage_heure(0x00, 0x20, 0x11);
	//DS3231_reglage_date(0x28, 0x04, 0x19);
	cls_LCD();
	
	pos_xy(1,1);
	write_LCD("DS3231");
	pos_xy(8,1);
	write_LCD("Il est: ");
	pos_xy(3,2);
	write_LCD("h");
	pos_xy(6,2);
	write_LCD("mn");
	pos_xy(10,2);
	write_LCD("s");

	pos_xy(1,3);
	write_LCD("ce jour: ");
	pos_xy(12,3);
	write_LCD("/");
	pos_xy(15,3);
	write_LCD("/20");
	
	pos_xy(1,4);
	write_LCD("Temp= ");


	while (1)
	{
		//affichage de l'heure
		DS3231_lecture_heure(&sec, &min, &heu);
		heu = BCDToDecimal(heu);
		dtostrf(heu,2,0,buffer);
		pos_xy(1,2);
		write_LCD(buffer);
		min = BCDToDecimal(min);
		dtostrf(min,2,0,buffer);
		pos_xy(4,2);
		write_LCD(buffer);
		sec = BCDToDecimal(sec);
		dtostrf(sec,2,0,buffer);
		pos_xy(8,2);
		write_LCD(buffer);
		
		//affichage de la date
		DS3231_lecture_date(&jou, &moi, &ann);
		jou = BCDToDecimal(jou);
		dtostrf(jou,2,0,buffer);
		pos_xy(10,3);
		write_LCD(buffer);
		moi = BCDToDecimal(moi);
		dtostrf(moi,2,0,buffer);
		pos_xy(13,3);
		write_LCD(buffer);
		ann = BCDToDecimal(ann);
		dtostrf(ann,2,0,buffer);
		pos_xy(18,3);
		write_LCD(buffer);

		//affichage de la température
		DS3231_lecture_temp(&temp_up, &temp_low);
		temperature = temp_up + ((temp_low >> 6) * 0.25);
		dtostrf(temperature,5,2,buffer_temp);
		pos_xy(7,4);
		write_LCD(buffer_temp);
	}
}

